from gc import callbacks
from random import randint

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, KeyboardButton, \
    ReplyKeyboardMarkup, LabeledPrice
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import logger
from app.query.query_sql import reg_user, get_user_profile, get_category, get_products_by_category, deduct_stars, \
    get_product_price
from app.user.kb_user import ease_link_kb

user_router = Router()


@user_router.message(Command('start'))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    logger.info(f"Registering user: {telegram_id}, {username}, {first_name}, {last_name}")
    await reg_user(telegram_id=telegram_id, username=username, first_name=first_name,
                        last_name=last_name)

    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å',reply_markup=ease_link_kb())


@user_router.message(lambda message: message.text == '–ü—Ä–æ—Ñ–∏–ª—å')
async def get_person(message: types.Message):
    user_id = message.from_user.id
    user_profile = await get_user_profile(user_id)

    if user_profile:
        profile_info = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å:\n"
            f"<b>ID</b>: {user_profile.telegram_id}\n"
            f"<b>–õ–æ–≥–∏–Ω:</b>:  {user_profile.username}\n"
            f"<b>–ò–º—è</b>: {user_profile.first_name}\n"
            f"<b>–§–∞–º–∏–ª–∏—è</b>: {user_profile.last_name}\n"
        )
        await message.answer(profile_info)

   # for category in categories:
    #     inline_kb.append([InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")])
    # keyboard = InlineKeyboardMarkup(inline_keyboard=inline_kb)

# ,callbacks=f'category_{i.id}


@user_router.message(lambda message: message.text == '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def category(message: types.Message):
    categories = await get_category()
    kb = []
    for category in categories:
        kb.append([InlineKeyboardButton(text=category.name, callback_data=f"category_{category.id}")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)






from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@user_router.callback_query(lambda c: c.data and c.data.startswith('category_'))
async def process_category(callback_query: types.CallbackQuery):
    category_id = int(callback_query.data.split('_')[1])
    await callback_query.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_id}")

    products = await get_products_by_category(category_id=category_id)
    if products:
        for product in products:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–∞–º–∏
            payment_button = InlineKeyboardButton(
                text=f"–û–ø–ª–∞—Ç–∏—Ç—å {product.price} ‚≠êÔ∏è",
                callback_data=f"pay_stars_{product.id}"
            )
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            test_payment_button = InlineKeyboardButton(
                text="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
                callback_data=f"test_payment_{product.id}"
            )
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[payment_button], [test_payment_button]])

            await callback_query.message.answer(
                f"<b>{product.name}</b>\n"
                f"{product.Description}\n"
                f"–¶–µ–Ω–∞: {product.price} ‚≠êÔ∏è",
                reply_markup=keyboard
            )
    else:
        await callback_query.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")




@user_router.callback_query(lambda c: c.data and c.data.startswith('pay_stars_'))
async def process_star_payment(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[2])
    user_id = callback_query.from_user.id

    product_price = await get_product_price(product_id)

    if product_price is not None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∑–≤–µ–∑–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if await deduct_stars(user_id, product_price):
            await callback_query.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ {product_price} ‚≠êÔ∏è!")
        else:
            await callback_query.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
    else:
        await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ.")


@user_router.callback_query(lambda c: c.data and c.data.startswith('test_payment_'))
async def process_test_payment(callback_query: types.CallbackQuery):
    product_id = int(callback_query.data.split('_')[2])
    user_id = callback_query.from_user.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å—á–µ—Ç
    prices = [LabeledPrice(label="Test Payment", amount=2000)]  # –°—É–º–º–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã
    await callback_query.message.answer_invoice(
        title="–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
        description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞",
        prices=prices,
        provider_token="",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        payload=f"test_payment_{product_id}",
        currency="XTR",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –≤–∞–ª—é—Ç—É
    )


